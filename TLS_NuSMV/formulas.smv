---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

-- Once a connection is closed, is remaisn always closed
LTLSPEC G ((out = ConnectionClosed) -> X (out = ConnectionClosed))

-- 6.1: It is illegal to make a state that has not been initialized with security parameters a current state.
LTLSPEC G ((inp = ChangeCipherSpec & X(out = ChangeCipherSpec#Finished)) -> O((inp = ClientHelloRSA | inp = ClientHelloDHE) & out != ConnectionClosed))

-- 7.2: Alert messages with a level of fatal result in the immediate termination of the connection.
LTLSPEC G ((out = Alert_Fatal_Unexpected_message#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Internal_error#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Handshake_failure#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Record_overflow#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Handshake_failure_Alert_Warning_No_renegotiation_Alert_Warning_Close_notify#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Bad_record_MAC#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Decrypt_error#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Bad_record_MAC_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Internal_error_) -> X (out = ConnectionClosed))

-- 7.3 The client sends a ClientHello message to which the server must respond with a ServerHello message, or else a fatal error will occur and the connection will fail.
LTLSPEC (inp = ClientHelloRSA -> (out = ServerHello_Certificate#CertificateRequest#ServerHelloDone | out = Alert_Fatal_Unexpected_message#ConnectionClosed))

-- 7.3 Application data MUST NOT be sent prior to the completion of the first handshake
LTLSPEC G ((inp = ApplicationData & out = ApplicationData) -> (O(inp = ChangeCipherSpec & out = Empty)& O(inp = Finished & out = ChangeCipherSpec#Finished)))

-- 7.1 The ChangeCipherSpec message is sent during the handshake after the security parameters have been agreed upon, but before the verifying Finished message is sent.
LTLSPEC G ( ((inp = ChangeCipherSpec & out = Empty -> (O(inp = ClientKeyExchange) & !O(inp = Finished)))) | out = Alert_Fatal_Unexpected_message#ConnectionClosed | out = ConnectionClosed)

-- 7.4.6 Client Certificate is the first message the client can send after receiving a ServerHelloDone message.  This message is only sent if the server requests a certificate.
LTLSPEC G ((inp = EmptyCertificate  & out = Empty) -> Y(out = ServerHello#Certificate#ServerKeyExchange#CertificateRequest#ServerHelloDone | out = ServerHello_Certificate#CertificateRequest#ServerHelloDone))

-- 7.4.7 Client Key Exchange Message must immediately follow Client certificate if it is sent or ServerHelloDone otherwise.
LTLSPEC G ((inp = ClientKeyExchange & out = Empty) -> Y((inp = EmptyCertificate & out = Empty)| out = ServerHello#Certificate#ServerKeyExchange#CertificateRequest#ServerHelloDone | out = ServerHello_Certificate#CertificateRequest#ServerHelloDone | out = ServerHello#Certificate#ServerHelloDone)) | out = Alert_Fatal_Unexpected_message#ConnectionClosed

-- 7.4.9 It is essential that a change cipher spec message be received between the other handshake messages and the Finished message.(It is a fatal error if a Finished message is not preceded by a ChangeCipherSpec message at the appropriate point in the handshake.)
LTLSPEC G((inp = Finished & (out = HandshakeClientKeyExchangeChangeCipherSpec#Finished | out = HandshakeCertificateHandshakeClientKeyExchangeHandshakeCertificateVerifyChangeCipherSpec#Finished | out = ChangeCipherSpec#Finished)) & !O(inp = ChangeCipherSpec) -> (out = Alert_Fatal_Unexpected_message#ConnectionClosed))

-- 7.4 The handshake protocol messages are presented below in the order they MUST be sent; sending handshake messages in an unexpected order results in a fatal error.
-- I don't think we can specify the ordering with LTL because this may not be the only path with each combination of inputs. You might get there taking a few HeartbeatRequests, for example. We might need CTL.