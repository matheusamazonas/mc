MODULE main
VAR state : {0,1,2,3,4,5,6};
inp : {Finished, ChangeCipherSpec, ClientKeyExchange, ClientHelloRSA, ApplicationDataEmpty, HeartbeatRequest, EmptyCertificate, ApplicationData};
out : {Alert_Fatal_Unexpected_message#ConnectionClosed, Empty, ConnectionClosed, Alert2_71ConnectionClosed, ApplicationData#Alert_Warning_Close_notify#ConnectionClosed, HandshakeClientKeyExchangeChangeCipherSpec#Finished, HandshakeCertificateHandshakeClientKeyExchangeHandshakeCertificateVerifyChangeCipherSpec#Finished, ChangeCipherSpec#Finished, HeartbeatResponse, ServerHello_Certificate#CertificateRequest#ServerHelloDone, Alert_Fatal_Internal_error#ConnectionClosed, Alert_Fatal_Handshake_failure#ConnectionClosed, Alert_Warning_Close_notify#ConnectionClosed, Alert_Fatal_Record_overflow#ConnectionClosed, ServerHello#Certificate#ServerKeyExchange#CertificateRequest#ServerHelloDone, Alert_Fatal_Illegal_parameter#ConnectionClosed, ServerHello#Certificate#ServerHelloDone, ApplicationDataApplicationDataApplicationDataApplicationDataApplicationDataApplicationData#ConnectionClosed, ApplicationData, Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify#ConnectionClosed, Alert2_42ConnectionClosed, Alert_Fatal_Handshake_failure_Alert_Warning_No_renegotiation_Alert_Warning_Close_notify#ConnectionClosed, Decryption_failed, HandshakeClientKeyExchangeChangeCipherSpecDecryption_failed, Alert_Fatal_Bad_record_MAC#ConnectionClosed, Alert_Fatal_Decrypt_error#ConnectionClosed, ChangeCipherSpecDecryption_failed, ApplicationData#ConnectionClosed, Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify_, Alert_Fatal_Unexpected_message_, Alert_Warning_Close_notify_, ApplicationDataAlert_Warning_Close_notify_, Alert_Fatal_Bad_record_MAC_, Alert_Fatal_Illegal_parameter_, Alert_Fatal_Illegal_parameter_Alert_Warning_Close_notify_, Alert_Fatal_Internal_error_, ApplicationDataApplicationDataApplicationDataApplicationData#Alert_Warning_Close_notify#ConnectionClosed};
ASSIGN
init(state) := 3;
next(state) := case
state = 0 & inp = ApplicationData: 6;
state = 0 & inp = ApplicationDataEmpty: 0;
state = 0 & inp = ChangeCipherSpec: 6;
state = 0 & inp = ClientHelloRSA: 6;
state = 0 & inp = ClientKeyExchange: 6;
state = 0 & inp = EmptyCertificate: 6;
state = 0 & inp = Finished: 5;
state = 0 & inp = HeartbeatRequest: 6;
state = 1 & inp = ApplicationData: 6;
state = 1 & inp = ApplicationDataEmpty: 1;
state = 1 & inp = ChangeCipherSpec: 6;
state = 1 & inp = ClientHelloRSA: 6;
state = 1 & inp = ClientKeyExchange: 4;
state = 1 & inp = EmptyCertificate: 6;
state = 1 & inp = Finished: 6;
state = 1 & inp = HeartbeatRequest: 6;
state = 2 & inp = ApplicationData: 6;
state = 2 & inp = ApplicationDataEmpty: 2;
state = 2 & inp = ChangeCipherSpec: 6;
state = 2 & inp = ClientHelloRSA: 6;
state = 2 & inp = ClientKeyExchange: 4;
state = 2 & inp = EmptyCertificate: 1;
state = 2 & inp = Finished: 6;
state = 2 & inp = HeartbeatRequest: 6;
state = 3 & inp = ApplicationData: 6;
state = 3 & inp = ApplicationDataEmpty: 3;
state = 3 & inp = ChangeCipherSpec: 6;
state = 3 & inp = ClientHelloRSA: 2;
state = 3 & inp = ClientKeyExchange: 6;
state = 3 & inp = EmptyCertificate: 6;
state = 3 & inp = Finished: 6;
state = 3 & inp = HeartbeatRequest: 6;
state = 4 & inp = ApplicationData: 6;
state = 4 & inp = ApplicationDataEmpty: 4;
state = 4 & inp = ChangeCipherSpec: 0;
state = 4 & inp = ClientHelloRSA: 6;
state = 4 & inp = ClientKeyExchange: 6;
state = 4 & inp = EmptyCertificate: 6;
state = 4 & inp = Finished: 6;
state = 4 & inp = HeartbeatRequest: 6;
state = 5 & inp = ApplicationData: 6;
state = 5 & inp = ApplicationDataEmpty: 5;
state = 5 & inp = ChangeCipherSpec: 6;
state = 5 & inp = ClientHelloRSA: 6;
state = 5 & inp = ClientKeyExchange: 6;
state = 5 & inp = EmptyCertificate: 6;
state = 5 & inp = Finished: 6;
state = 5 & inp = HeartbeatRequest: 5;
state = 6 & inp = ApplicationData: 6;
state = 6 & inp = ApplicationDataEmpty: 6;
state = 6 & inp = ChangeCipherSpec: 6;
state = 6 & inp = ClientHelloRSA: 6;
state = 6 & inp = ClientKeyExchange: 6;
state = 6 & inp = EmptyCertificate: 6;
state = 6 & inp = Finished: 6;
state = 6 & inp = HeartbeatRequest: 6;
esac;
out := case
state = 0 & inp = ApplicationData: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 0 & inp = ApplicationDataEmpty: Empty;
state = 0 & inp = ChangeCipherSpec: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 0 & inp = ClientHelloRSA: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 0 & inp = ClientKeyExchange: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 0 & inp = EmptyCertificate: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 0 & inp = Finished: ChangeCipherSpec#Finished;
state = 0 & inp = HeartbeatRequest: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = ApplicationData: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = ApplicationDataEmpty: Empty;
state = 1 & inp = ChangeCipherSpec: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = ClientHelloRSA: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = ClientKeyExchange: Empty;
state = 1 & inp = EmptyCertificate: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = Finished: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 1 & inp = HeartbeatRequest: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 2 & inp = ApplicationData: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 2 & inp = ApplicationDataEmpty: Empty;
state = 2 & inp = ChangeCipherSpec: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 2 & inp = ClientHelloRSA: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 2 & inp = ClientKeyExchange: Empty;
state = 2 & inp = EmptyCertificate: Empty;
state = 2 & inp = Finished: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 2 & inp = HeartbeatRequest: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = ApplicationData: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = ApplicationDataEmpty: Empty;
state = 3 & inp = ChangeCipherSpec: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = ClientHelloRSA: ServerHello_Certificate#CertificateRequest#ServerHelloDone;
state = 3 & inp = ClientKeyExchange: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = EmptyCertificate: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = Finished: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 3 & inp = HeartbeatRequest: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 4 & inp = ApplicationData: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 4 & inp = ApplicationDataEmpty: Empty;
state = 4 & inp = ChangeCipherSpec: Empty;
state = 4 & inp = ClientHelloRSA: Alert_Fatal_Internal_error#ConnectionClosed;
state = 4 & inp = ClientKeyExchange: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 4 & inp = EmptyCertificate: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 4 & inp = Finished: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 4 & inp = HeartbeatRequest: Alert_Fatal_Unexpected_message#ConnectionClosed;
state = 5 & inp = ApplicationData: ApplicationData#Alert_Warning_Close_notify#ConnectionClosed;
state = 5 & inp = ApplicationDataEmpty: Empty;
state = 5 & inp = ChangeCipherSpec: Alert_Warning_Close_notify#ConnectionClosed;
state = 5 & inp = ClientHelloRSA: Alert_Fatal_Handshake_failure#ConnectionClosed;
state = 5 & inp = ClientKeyExchange: Alert_Warning_Close_notify#ConnectionClosed;
state = 5 & inp = EmptyCertificate: Alert_Warning_Close_notify#ConnectionClosed;
state = 5 & inp = Finished: Alert_Warning_Close_notify#ConnectionClosed;
state = 5 & inp = HeartbeatRequest: HeartbeatResponse;
state = 6 & inp = ApplicationData: ConnectionClosed;
state = 6 & inp = ApplicationDataEmpty: ConnectionClosed;
state = 6 & inp = ChangeCipherSpec: ConnectionClosed;
state = 6 & inp = ClientHelloRSA: ConnectionClosed;
state = 6 & inp = ClientKeyExchange: ConnectionClosed;
state = 6 & inp = EmptyCertificate: ConnectionClosed;
state = 6 & inp = Finished: ConnectionClosed;
state = 6 & inp = HeartbeatRequest: ConnectionClosed;
esac;






---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

-- Once a connection is closed, is remaisn always closed
LTLSPEC G ((out = ConnectionClosed) -> X (out = ConnectionClosed))

-- 6.1: It is illegal to make a state that has not been initialized with security parameters a current state.
LTLSPEC G ((inp = ChangeCipherSpec & X(out = ChangeCipherSpec#Finished)) -> O(inp = ClientHelloRSA & out != ConnectionClosed))

-- 7.2: Alert messages with a level of fatal result in the immediate termination of the connection.
LTLSPEC G ((out = Alert_Fatal_Unexpected_message#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Internal_error#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Handshake_failure#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Record_overflow#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Handshake_failure_Alert_Warning_No_renegotiation_Alert_Warning_Close_notify#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Bad_record_MAC#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Decrypt_error#ConnectionClosed) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Unexpected_message_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Bad_record_MAC_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Illegal_parameter_Alert_Warning_Close_notify_) -> X (out = ConnectionClosed))
LTLSPEC G ((out = Alert_Fatal_Internal_error_) -> X (out = ConnectionClosed))

-- 7.3 The client sends a ClientHello message to which the server must respond with a ServerHello message, or else a fatal error will occur and the connection will fail.
LTLSPEC (inp = ClientHelloRSA -> (out = ServerHello_Certificate#CertificateRequest#ServerHelloDone | out = Alert_Fatal_Unexpected_message#ConnectionClosed))

-- 7.3 Application data MUST NOT be sent prior to the completion of the first handshake
LTLSPEC G ((inp = ApplicationData & out = ApplicationData) -> (O(inp = ChangeCipherSpec & out = Empty)& O(inp = Finished & out = ChangeCipherSpec#Finished)))

-- 7.1 The ChangeCipherSpec message is sent during the handshake after the security parameters have been agreed upon, but before the verifying Finished message is sent.
LTLSPEC G (!((inp = ChangeCipherSpec) -> (Y(inp = ClientKeyExchange) & !H(inp = Finished))) -> (out = ConnectionClosed | out = Alert_Fatal_Unexpected_message#ConnectionClosed))

-- 7.4.6 Client Certificate is the first message the client can send after receiving a ServerHelloDone message.  This message is only sent if the server requests a certificate.
LTLSPEC G ((inp = EmptyCertificate) -> Y(out = ServerHello#Certificate#ServerKeyExchange#CertificateRequest#ServerHelloDone | out = ServerHello_Certificate#CertificateRequest#ServerHelloDone))

-- 7.4.7 Client Key Exchange Message must immediately follow Client certificate if it is sent or ServerHelloDone otherwise.
LTLSPEC G ((inp = ClientKeyExchange) -> Y(inp = EmptyCertificate | out = ServerHello#Certificate#ServerKeyExchange#CertificateRequest#ServerHelloDone | out = ServerHello_Certificate#CertificateRequest#ServerHelloDone))

-- 7.4.9 It is essential that a change cipher spec message be received between the other handshake messages and the Finished message.(It is a fatal error if a Finished message is not preceded by a ChangeCipherSpec message at the appropriate point in the handshake.)
LTLSPEC G((inp = Finished) & !Y(inp = ChangeCipherSpec) -> (out = Alert_Fatal_Unexpected_message#ConnectionClosed))

-- 7.4 The handshake protocol messages are presented below in the order they MUST be sent; sending handshake messages in an unexpected order results in a fatal error.
-- I don't think we can specify the ordering with LTL because this may not be the only path with each combination of inputs. You might get there taking a few HeartbeatRequests, for example. We might need CTL.





